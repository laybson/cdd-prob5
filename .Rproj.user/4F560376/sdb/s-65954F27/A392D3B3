{
    "collab_server" : "",
    "contents" : "---\ntitle: \"regressão logistica\"\nauthor: \"Nazareno Andrade\"\noutput: html_notebook\n---\n\n```{r include=FALSE, warning=FALSE}\nlibrary(GGally)\nlibrary(pscl)\nlibrary(broom)\nlibrary(tidyverse)\nlibrary(modelr) # devtools::install_github(\"hadley/modelr\")\n\ntheme_set(theme_bw())\n```\n\n# Exemplo com o titanic\n\n```{r}\ntitanic <- read_csv(\"dados/titanic3.csv\")\ntitanic <- titanic %>% \n  select(pclass, survived, sex, age, fare) %>%\n  na.omit() %>%\n  mutate(survived = case_when(.$survived == 0 ~ \"não\", \n                              .$survived == 1 ~ \"sim\"), \n         pclass = as.character(pclass)) \n\nggpairs(titanic)\n\ntitanic %>% \n  ggplot(aes(x = sex, fill = survived)) + \n  geom_bar(position = \"dodge\")\n```\n\nParece haver uma relação entre fare e survived:\n\n```{r}\ntitanic %>% \n  ggplot(aes(x = survived, y = fare)) + \n  geom_violin(aes(fill = survived), alpha = .4) + \n  #geom_boxplot(aes(fill = survived), alpha = .4) + \n  geom_count() + \n  #geom_jitter(width = .1, alpha = .3) + \n  coord_flip() \n```\n\nA relação é mais visível em escala de log para o fare:\n\n```{r}\ntitanic %>% \n  filter(fare > 0) %>%\n  ggplot(aes(x = survived, y = fare)) + \n  geom_violin(aes(fill = survived), alpha = .4) + \n  geom_count(alpha = .5) + \n  coord_flip() +\n  scale_y_log10() \n```\n\n\nSeria possível passar uma regressão linear?\n\n```{r}\ntitanic %>% \n  filter(fare > 0) %>% \n  ggplot(aes(x = fare, y = survived)) + \n  scale_x_log10() + \n  geom_count(alpha = .5) \n```\n\n\n# Sobre a função Logit\n\n```{r}\nminha_logit = function(b0, b1, x){\n  return(exp(b0 + b1 * x) / (1 + exp(b0 + b1 * x)))\n}\n\n# Um preditor numérico\nx = -20:20\n\n# Usando uma função Logit qualquer\npy_dado_x = minha_logit(1.2, 1.3, x)\n\ndata.frame(x, py_dado_x) %>% \n  ggplot(aes(x, py_dado_x)) + \n  geom_point() + \n  geom_line()\n```\n\n\n\n```{r}\n# coeficiente negativo: \npy_dado_x = minha_logit(1.2, -1.3, x)\n\ndata.frame(x, py_dado_x) %>% \n  ggplot(aes(x, py_dado_x)) + \n  geom_point() + \n  geom_line()\n```\n\n# Fit univariado no exemplo com o Titanic\n\nA interpretação é semelhante à regressão linear. Exceto que os valores dos coeficientes sem o exp fazem pouco sentido. Aqui é melhor usar a noção de odds ratio. Para isso basta exponenciar os coeficientes encontrados. \n\n```{r}\ntitanic_t = titanic %>% \n  filter(fare > 0) %>% \n  mutate(logFare = log(fare), \n         survived = as.factor(survived)) # glm que usaremos abaixo lida melhor com factor que character\n  \nbm <- glm(survived ~ logFare, \n          data = titanic_t, \n          family = \"binomial\")\n\ntidy(bm, conf.int = TRUE) %>% \n  select(-statistic, -p.value)\n# EXPONENCIANDO:\ntidy(bm, conf.int = TRUE, exponentiate = TRUE) %>% \n  select(-statistic, -p.value)\n## Como aqui y = exp(b0)*exp(b1*x1), aumentar em uma unidade x, faz com que y seja multiplicado por exp(b1), que é o estimate nessa tabela acima\n\n```\n\nA variável dependente no modelo é $p(x)/(1-p(x))$. Caso queiramos observar o efeito de $x$ em $p(x)$, isso é menos óbvio porque a relação entre $x$ e $p(x)$ é não linear: o efeito depende dos valores de $x$. A forma de fazer: \n\n\n```{r}\nteste = data.frame(logFare = 1:5)\n\nbm %>% \n  augment(newdata = teste, \n          type.predict = \"response\")\n\n```\n\n\nNão temos R^2 :(\n\n```{r}\n# Não existe um R^2 aqui\nglance(bm)\n# Pseudo R^2:\npR2(bm)\n```\n\n## Visualizando o modelo\n\n```{r}\nbm %>% \n  augment(type.predict = \"response\")  %>% \n  mutate(survivedNum = ifelse(survived == \"sim\", 1, 0)) %>% \n  ggplot(aes(x = logFare)) + \n  geom_count(aes(y = survivedNum), alpha = 0.5) + \n  geom_line(aes(y = .fitted))\n```\n\n## Preditor categórico\n\n```{r}\nbm <- glm(survived ~ pclass, \n          data = titanic_t, \n          family = \"binomial\")\ntidy(bm, conf.int = TRUE)\nglance(bm)\npR2(bm)\n#summary(bm)\n```\n\n```{r}\nbm %>% \n  augment(type.predict = \"response\")  %>% \n  mutate(survivedNum = ifelse(survived == \"sim\", 1, 0)) %>% \n  ggplot(aes(x = pclass)) + \n  geom_count(aes(y = survivedNum), alpha = 0.5) + \n  geom_point(aes(y = .fitted), color = \"orange\")\n```\n\n# Multivariada:\n\n```{r}\nbm <- glm(survived ~ pclass + sex + age, \n          data = titanic_t, \n          family = \"binomial\")\n\ntidy(bm, conf.int = TRUE)\ntidy(bm, conf.int = TRUE, exponentiate = TRUE)\n\nglance(bm)\npR2(bm)\n\n```\n\n```{r}\nm = titanic_t %>% \n  data_grid(pclass, sex, age)\nmm = augment(bm, \n             newdata = m, \n             type.predict = \"response\")\n\nggplot(mm, aes(x = age, colour = pclass)) + \n  geom_line(aes(y = .fitted)) +  \n  facet_grid(.~sex) \n\n```\n\n### Interações\n\n```{r}\nbm2 <- glm(survived ~ pclass + sex + age + sex*age, \n          data = titanic_t, \n          family = \"binomial\")\n\ntidy(bm2, conf.int = TRUE, exponentiate = TRUE)\npR2(bm2)\n\nbm2 %>% augment(bm2, \n        newdata = m, \n        type.predict = \"response\") %>% \n  ggplot(aes(x = age, colour = pclass)) + \n  geom_line(aes(y = .fitted)) +  \n  facet_grid(.~sex) \n\n\n```\n\n## Outra forma de avaliar é pela precisão:\n\n```{r}\nprevisoes = bm %>% \n  augment(type.predict = \"response\") %>% \n  mutate(segundo_modelo = .fitted > .5, \n         segundo_dados = survived == \"sim\")\n\ntable(previsoes$segundo_modelo, previsoes$segundo_dados)\nxtabs(~ segundo_modelo + segundo_dados, data = previsoes)\n\nrequire(vcd)\nmosaic(segundo_dados ~ segundo_modelo, data = previsoes, \n       shade = T)\n```\n\n```{r}\nacuracia <- sum((predictions == titanic_t$true_survivals)) / NROW(predictions)\nacuracia\n\nfalsos_positivos = sum((predictions == T & titanic_t$true_survivals == F)) / NROW(predictions)\nfalsos_positivos\n\nfalsos_negativos = sum((predictions == F & titanic_t$true_survivals == T)) / NROW(predictions)\nfalsos_negativos\n```\n\n\n# Outro exemplo: fit relacionando preferências e gêneros em speed dating\n\n```{r}\nx = read_csv(\"https://raw.githubusercontent.com/nazareno/ciencia-de-dados-1/master/5-regressao/speed-dating/speed-dating2.csv\") %>% \n  mutate(dec = as.factor(dec), \n         gender = as.factor(gender))\ngendermodel = glm(dec ~ gender, \n                  data = x, \n                  family = \"binomial\")\ntidy(gendermodel, conf.int = TRUE, exponentiate = TRUE)\nglance(gendermodel)\npR2(gendermodel)\n\nexpectativa_realidade = augment(gendermodel, \n                                type.predict = \"response\") \n\nexpectativa_realidade %>% \n  mutate(genderNum = ifelse(gender == \"1\", 1, 0)) %>% \n  ggplot(aes(x = sports)) + \n  geom_count(aes(y = genderNum), alpha = 0.5) + \n  geom_line(aes(y = .fitted))\n\nexpectativa_realidade = expectativa_realidade %>% \n  mutate(categoria_prevista = ifelse(.fitted > .5, \"1\", \"0\"))\n\ntable(expectativa_realidade$categoria_prevista, expectativa_realidade$gender)\n```\n",
    "created" : 1532605384647.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1584421497",
    "id" : "A392D3B3",
    "lastKnownWriteTime" : 1532605232,
    "last_content_update" : 1533211252147,
    "path" : "~/ad1/romance/5-regressao/4-regressao-logistica.Rmd",
    "project_path" : "4-regressao-logistica.Rmd",
    "properties" : {
        "chunk_output_type" : "inline"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}